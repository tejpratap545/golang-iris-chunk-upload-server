// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUploadClient is the client API for AppUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUploadClient interface {
	UploadApp(ctx context.Context, opts ...grpc.CallOption) (AppUpload_UploadAppClient, error)
}

type appUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUploadClient(cc grpc.ClientConnInterface) AppUploadClient {
	return &appUploadClient{cc}
}

func (c *appUploadClient) UploadApp(ctx context.Context, opts ...grpc.CallOption) (AppUpload_UploadAppClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppUpload_ServiceDesc.Streams[0], "/feblic.appupload.AppUpload/UploadApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appUploadUploadAppClient{stream}
	return x, nil
}

type AppUpload_UploadAppClient interface {
	Send(*UploadAppRequest) error
	CloseAndRecv() (*UploadAppResponse, error)
	grpc.ClientStream
}

type appUploadUploadAppClient struct {
	grpc.ClientStream
}

func (x *appUploadUploadAppClient) Send(m *UploadAppRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appUploadUploadAppClient) CloseAndRecv() (*UploadAppResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAppResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppUploadServer is the server API for AppUpload service.
// All implementations must embed UnimplementedAppUploadServer
// for forward compatibility
type AppUploadServer interface {
	UploadApp(AppUpload_UploadAppServer) error
	mustEmbedUnimplementedAppUploadServer()
}

// UnimplementedAppUploadServer must be embedded to have forward compatible implementations.
type UnimplementedAppUploadServer struct {
}

func (UnimplementedAppUploadServer) UploadApp(AppUpload_UploadAppServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadApp not implemented")
}
func (UnimplementedAppUploadServer) mustEmbedUnimplementedAppUploadServer() {}

// UnsafeAppUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUploadServer will
// result in compilation errors.
type UnsafeAppUploadServer interface {
	mustEmbedUnimplementedAppUploadServer()
}

func RegisterAppUploadServer(s grpc.ServiceRegistrar, srv AppUploadServer) {
	s.RegisterService(&AppUpload_ServiceDesc, srv)
}

func _AppUpload_UploadApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppUploadServer).UploadApp(&appUploadUploadAppServer{stream})
}

type AppUpload_UploadAppServer interface {
	SendAndClose(*UploadAppResponse) error
	Recv() (*UploadAppRequest, error)
	grpc.ServerStream
}

type appUploadUploadAppServer struct {
	grpc.ServerStream
}

func (x *appUploadUploadAppServer) SendAndClose(m *UploadAppResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appUploadUploadAppServer) Recv() (*UploadAppRequest, error) {
	m := new(UploadAppRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppUpload_ServiceDesc is the grpc.ServiceDesc for AppUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feblic.appupload.AppUpload",
	HandlerType: (*AppUploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadApp",
			Handler:       _AppUpload_UploadApp_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "app_upload_service.proto",
}
